/*
 * GccApplication3.c
 *
 * Created: 18-10-2017 12:58:29
 *  Author: Lenovo T420
 */

#include <avr/io.h>
#include <stdlib.h>
#include <avr/sfr_defs.h>

#define F_CPU 16E6
#include <util/delay.h>
#include <math.h>
#include <avr/interrupt.h>
#include <avr/EEPROM.h>
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51
char ADCOut[10];

// eeprom addresses
uint16_t tempThresholdAddr = 0;
uint16_t lightThresholdAddr = 4;
uint16_t maxDistanceAddr = 8;

// ledjes
#define ledGroen PORTB0
#define ledGeel	PORTB1
#define ledRood PORTB2

uint8_t autoTask = 0;


//typen: UNDEFINED = 0,	LICHT = 1,	TEMPERATUUR = 2
int besturingsType = 2;

int float_to_constchar(float number){
	float numbah = number;
	// verkrijg het integer gedeelte als int
	int intpart = floor(numbah);
	// verkrijg het decimale gedeelte(max 2 getallen achter de comma)
	int decpart = ceil((numbah-intpart)*100);
	// conversie naar const char *
	char buffer [100];
	int cx;
	cx = snprintf ( buffer, 100, "%d.%d", intpart, decpart);
	return buffer;
}
float get_temp()
{
	int input = read_analog_pin(0);
	// converting that reading to voltage, for 3.3v arduino use 3.3
	float voltage = input * 5.0;
	voltage /= 1024.0;
	// now print out the temperature
	float temperatuur = (voltage - 0.5) * 100 ;  //to degrees ((voltage - 500mV) * 100)
	return temperatuur;
}
float get_light()
{
		int input = read_analog_pin(1);
		float voltage = input * 5.0;
		//voltage /= 1024.0;
		return voltage;
}
//returns the reading of the chosen analog pin
int read_analog_pin(pin){
	int tempPin = pin;
	uint8_t low, high;
	//lees input voltage
	ADMUX = (1 << 6) | (pin);
	// converteer naar een hexadecimaal getal
	ADCSRA |= 1<<ADPS0; 	//Set ADC prescaler to division factor of 128 (16,000,000/128,000 = 125Hz)
	ADCSRA |= 1<<ADPS1;
	ADCSRA |= 1<<ADPS2;

	ADCSRA |= _BV(ADEN);
	ADCSRA |= _BV(ADSC);
	while (bit_is_set(ADCSRA, ADSC));
	low  = ADCL;
	high = ADCH;

	// combine the two bytes
	int input = (high << 8) | low;
	return input;
}

#define TrigPin PIND4
#define EchoPin PIND2
volatile uint8_t pingState = 0;
volatile float echoInches = 0;
float get_distance()
{
	// Turn on timer with no prescaler on the clock for fastest
	// triggering of the interrupt service routine.
	TCCR1B = (1<<CS10);
	TIMSK1 = (1<<TOIE1);

	PCICR = (1<<PCIE2);
	PCMSK2 = (1<<PCINT18);

	DDRD = (1<<TrigPin);		// Set Pins As Output
	TCNT1 = 0;
	echoInches = 0;
	sei();
	while (pingState != 3)
	{
		switch (pingState){
			case 0:

				PORTD &= ~(1<<TrigPin);			// Set Trigger Pin To 0
				_delay_ms(1);					// Wait
				PORTD |= (1<<TrigPin);			// Set Trigger Pin To 1
				_delay_ms(1);					// Wait
				PORTD &= ~(1<<TrigPin);			// Set Trigger Pin To 0
				pingState++;					// Increment State
				break;
			case 1:
				// While In This Case, Do Nothing
				break;
			case 2:
				if(echoInches == -1){	// If Overflow Occured
					/*PORTD &= ~(1<<TrigPin);			// Set Trigger Pin To 0
					_delay_ms(1);					// Wait
					PORTD |= (1<<TrigPin);			// Set Trigger Pin To 1
					_delay_ms(1);					// Wait
					PORTD &= ~(1<<TrigPin);			// Set Trigger Pin To 0
					pingState = 1;					// Increment State*/
					//dit omdat hij de timer opnieuw laat lopen bij een overflow en ik niet weet hoe je hem uit zet
					break;
				}else{							// Otherwise

				}
				pingState++;					// Increment State
				break;
			}
	}
	pingState = 0;
	echoInches /= 1000;
	return echoInches;
}

float get_avg_distance(){
	float avg = 0.0;
	float times = 5.0;
	for(int i = 0; i<times; i++){
		avg += get_distance();
	}
	return (avg/times);
}

ISR(PCINT2_vect){
	if(PIND & (1<<EchoPin)){					// If EchoPin Is High
		TCNT1 = 0;								// Reset Timer
		TCCR1B |= (1<<CS10);					// Enable Timer
	}else{										// Othewise
		TCCR1B &= ~(1<<CS10);					// Disable Timer
		echoInches = TCNT1;//148;					// Count echoInches
		pingState = 2;							// Increment State
	}
}
ISR(TIMER1_OVF_vect){
	TCCR1B &= ~(1<<CS10);						// Enable Timer // hierdoor blijft hij (volgens mij) overflows genereren
	echoInches = -1;							// Set -1 As echoInches For Overflow
	pingState = 2;								// Increment State
}

int get_type(){
		char buffer [100];
		int cx;
		cx = snprintf ( buffer, 100, "%d", besturingsType);
		return buffer;
}
void ledAan(int led){PORTB |= _BV(led);}
void ledUit(int led){PORTB &= ~ _BV(led);}
int volatile goingUp = 0;

void up(){
	goingUp = 1;
	handleScherm(0);
}
void down(){
	goingUp = 2;
	handleScherm(0);
}
void handleScherm(int autom){
	float maxDist = eeprom_read_float(maxDistanceAddr);
	float lightThreshold =eeprom_read_float(lightThresholdAddr);
	float tempThreshold = eeprom_read_float(tempThresholdAddr);
	while(goingUp != 0){
		if(autom==1)
		{
			if (besturingsType == 2)
			{
				float temperatuur = get_temp();
				if (temperatuur>tempThreshold){
					goingUp = 2;
				}else{
					if(temperatuur<tempThreshold){
						goingUp = 1;
					}
				}
			}
			if (besturingsType==1){
				float lightLevel = get_light();
			if(lightLevel<lightThreshold){goingUp=1;}
			else{
			if(lightLevel>lightThreshold){goingUp=2;}
			}
			}
		}
		ledAan(ledGeel);
		if(goingUp==1){
			ledUit(ledRood);
			ledAan(ledGroen);
			if(get_avg_distance()<5.5){
				goingUp=0;
				ser_writeln("went up");
				}
		}
		if(goingUp==2){
			ledUit(ledGroen);
			ledAan(ledRood);
			if(get_avg_distance()>(maxDist-0.25)){
				goingUp=0;
				ser_writeln("went down");}
			}
		ledUit(ledGeel);
		_delay_ms(15);
	}
}
void auto_screen_contr(){
	goingUp=3;
	handleScherm(1);
	//SCH_Add_Task(auto_temp_screen_contr, 9500, 0);//9500 = elke 40sec
	SCH_Add_Task(auto_screen_contr, 2400, 0);
}
/*
void led1aan(){ledAan(ledGeel);
SCH_Add_Task(led1aan,9500,0);}
void led1uit(){ledUit(ledGeel);
	SCH_Add_Task(led1uit,9500,0);}
	*/
void go_auto(){
	autoTask = 1;
	SCH_Init_T1();
	SCH_Add_Task(auto_screen_contr,0,0);
	while(autoTask ==1){
		SCH_Dispatch_Tasks();
	}
}
void tellDistance(){ser_writeln(float_to_constchar(get_distance()));}
void readStop()
{
	char buffer[200];
	ser_readln(buffer, 200);
	if (goingUp!=0)
	{
		if(!strcmp(buffer, "down")){if(goingUp==1){goingUp=2;}}
		if(!strcmp(buffer, "up")){if(goingUp==2){goingUp=1;}}
	}
	ser_writeln("slow down!");
	ser_writeln("ERR");
}
void readCommands();
int main(void)
{
	ser_init();
	SCH_Init_T1();
	SCH_Start();
	_delay_ms(1000);
	DDRB = 0b00000111;
	while(1){
		SCH_Dispatch_Tasks();
		SCH_Add_Task(readCommands,0,0);
	}

}
//is a command being processed(0=no, 1 = yes)
uint8_t volatile commandread=0;
void readCommands()
{
	char buffer[200];
	ser_readln(buffer, 200);
	if (commandread==0)
		{
		if (!strcmp(buffer, "hello")) {
			commandread=1;
			ser_writeln("IkBenEr!");
		}
		if (!strcmp(buffer, "info")) {
			commandread=1;
			ser_writeln("Ledjes demo v1.0 Arduino (c)2017 MESM");
		}
		if (!strcmp(buffer, "get_type")) {
			commandread=1;
			ser_writeln(get_type());
		}
		if (!strcmp(buffer, "up")) {
			commandread=1;
			up();
		}
		if (!strcmp(buffer, "down")) {
			commandread=1;
			down();
		}
		if (!strcmp(buffer, "go_auto")) {
			commandread=1;
			if(autoTask == 0){
				ser_writeln("going auto");
				ser_writeln("OK");
				go_auto();
				ser_writeln("automode Finished");
			}else{
				ser_writeln("automode is already active");
			}
		}
		if (!strcmp(buffer, "get_temp")) {
			commandread=1;
			ser_writeln(float_to_constchar(get_temp()));
		}
		if (!strcmp(buffer, "get_temp2")) {
			commandread=1;
			ser_writeln(buffer);
		}
		if (!strcmp(buffer, "get_light")) {
			commandread=1;
			ser_writeln(float_to_constchar(get_light()));
		}
		//setters en getters voor de drempelwaarden van licht, temperatuur en afstand
		//drempelwaarden voor licht
		if (!strcmp(buffer, "light_thres_plus")) {
			commandread=1;
			float huidig = eeprom_read_float(lightThresholdAddr);
			huidig += 10.0;
			eeprom_update_float(lightThresholdAddr, huidig);
		}
		if (!strcmp(buffer, "light_thres_min")) {
			commandread=1;
			float huidig = eeprom_read_float(lightThresholdAddr);
			huidig -= 10.0;
			eeprom_update_float(lightThresholdAddr, huidig);
		}
		if (!strcmp(buffer, "get_light_thres")) {
			commandread=1;
			float a = eeprom_read_float(lightThresholdAddr);
			int tempVal = float_to_constchar(a);
			ser_writeln(tempVal);
		}
		// drempelwaarden voor de temperatuur
		if (!strcmp(buffer, "temp_thres_plus")) {
			commandread=1;
			float huidig = eeprom_read_float(tempThresholdAddr);
			huidig += 1.0;
			eeprom_update_float(tempThresholdAddr, huidig);
		}
		if (!strcmp(buffer, "temp_thres_min")) {
			commandread=1;
			float huidig = eeprom_read_float(tempThresholdAddr);
			huidig -= 1.0;
			eeprom_update_float(tempThresholdAddr, huidig);
		}
		if (!strcmp(buffer, "get_temp_thres")) {
			commandread=1;
			float a = eeprom_read_float(tempThresholdAddr);
			int tempVal = float_to_constchar(a);
			ser_writeln(tempVal);
		}
		//drempelwaarden voor de maximale uitrolstanden
		if (!strcmp(buffer, "dist_thres_plus")) {
			commandread=1;
			float huidig = eeprom_read_float(maxDistanceAddr);
			huidig += 1.0;
			eeprom_update_float(maxDistanceAddr, huidig);
		}
		if (!strcmp(buffer, "dist_thres_min")) {
			commandread=1;
			float huidig = eeprom_read_float(maxDistanceAddr);
			huidig -= 1.0;
			eeprom_update_float(maxDistanceAddr, huidig);
		}
		if (!strcmp(buffer, "get_dist_thres")) {
			commandread=1;
			float a = eeprom_read_float(maxDistanceAddr);
			int tempVal = float_to_constchar(a);
			ser_writeln(tempVal);
		}
		if (!strcmp(buffer, "get_distance")) {
			commandread=1;
			ser_writeln(float_to_constchar(get_distance()));
		}
		if (!strcmp(buffer, "reset")) {
			main();
		}
		if (commandread==0) {
			ser_writeln(buffer);
		}
		if (commandread==1) {
			ser_writeln("OK");
		} else {
			ser_writeln("ERR");
		}
		commandread = 0;
	}
	else{
		//if(!strcmp(buffer, "down")){if(goingUp==1){goingUp=2;}}
		//if(!strcmp(buffer, "up")){if(goingUp==2){goingUp=1;}}
		ser_writeln("slow down!");
		ser_writeln("ERR");
	}
}
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
	// send the data
	UDR0 = data;
}

void ser_writeln(const char* line){
	for(size_t i=0; i<strlen(line); i++){
		transmit(line[i]);
	}
	transmit('\n');
}

//UIT DE MAIL----------------------------------------
// Serial init functie, die zorgt voor data-transport in beide richtingen
void ser_init() {
	// Set baud rate
	UBRR0H = 0;
	UBRR0L = UBBRVAL;
	// disable U2X mode
	UCSR0A = 0;
	// enable TX and RX
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
	// set frame format: asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
}

// Serial read functie in C
char ser_read() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
	return UDR0;
}

// Serial readln functie in C (van computer naar Arduino)
// Begrijp je wat deze functie doet?
void ser_readln(char *line, uint8_t bufsize) {
	uint8_t p=0;
	char c;
	do {
		c=ser_read();
		if (c!='\n') {
			line[p++]=c;
		}
		line[p]='\0';
	} while ((c!='\n') && (p<bufsize-1));
}